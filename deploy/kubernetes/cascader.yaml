apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: cascader
  name: cascader-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: cascader
  name: cascader
  namespace: cascader-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: cascader
  name: cascader-leader-election-role
  namespace: cascader-system
rules:
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cascader-manager-role
rules:
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
  - apiGroups:
      - apps
    resources:
      - daemonsets
    verbs:
      - get
      - list
      - patch
      - watch
  - apiGroups:
      - apps
    resources:
      - deployments
    verbs:
      - get
      - list
      - patch
      - watch
  - apiGroups:
      - apps
    resources:
      - statefulsets
    verbs:
      - get
      - list
      - patch
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cascader-metrics-auth-role
rules:
  - apiGroups:
      - authentication.k8s.io
    resources:
      - tokenreviews
    verbs:
      - create
  - apiGroups:
      - authorization.k8s.io
    resources:
      - subjectaccessreviews
    verbs:
      - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: cascader
  name: cascader-leader-election-rolebinding
  namespace: cascader-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cascader-leader-election-role
subjects:
  - kind: ServiceAccount
    name: cascader
    namespace: cascader-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: cascader
  name: cascader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cascader
subjects:
  - kind: ServiceAccount
    name: cascader
    namespace: cascader-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cascader-metrics-auth-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cascader-metrics-auth-role
subjects:
  - kind: ServiceAccount
    name: cascader
    namespace: cascader-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: cascader
  name: cascader-metrics
  namespace: cascader-system
spec:
  ports:
    - name: https
      port: 8443
      protocol: TCP
      targetPort: 8443
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: cascader
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: cascader
  name: cascader
  namespace: cascader-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/name: cascader
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: cascader
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/name: cascader
    spec:
      containers:
        - name: cascader
          image: ghcr.io/thurgauerkb/cascader:v0.0.1
          ports:
            - name: metrics
              containerPort: 8443
              protocol: TCP
            - name: probes
              containerPort: 8081
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
      securityContext:
        runAsNonRoot: true
      serviceAccountName: cascader
      terminationGracePeriodSeconds: 10
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: cascader-alerts
  namespace: cascader-system
spec:
  groups:
    - name: CascaderAlerts
      rules:
        - alert: CascaderCycleDetected
          annotations:
            description:
              "A dependency cycle has been detected in the Cascader controller.
              Namespace: {{ $labels.namespace }}, Name: {{ $labels.name }}, Resource Kind:
              {{ $labels.resource_kind }}. Please check the corresponding Kubernetes Event
              for detailed cycle path information."
            summary:
              Dependency Cycle Detected in ({{ $labels.namespace }}/{{ $labels.name
              }})
          expr: cascader_dependency_cycles_detected > 0
          for: 1m
          labels:
            severity: critical
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: cascader
  name: cascader-metrics-monitor
  namespace: cascader-system
spec:
  endpoints:
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      path: /metrics
      port: https
      scheme: https
      tlsConfig:
        insecureSkipVerify: true
  selector:
    matchLabels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/name: cascader
